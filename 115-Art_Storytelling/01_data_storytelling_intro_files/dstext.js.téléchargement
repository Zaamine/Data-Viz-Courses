// DataScientest.com extension for Jupyter Notebook
// Last update : 21/11/16
//
// Current authors : naascraft,
//
// Current TODO :
/*

+ Details for each functionality, with the main idea and function names
  used in the below code

*/
//
// Functionalities :
//
//   1. Specific Cell toolbar for metadata editing
//       --TODO--
//
//   2. Question dividers and metadata update accordingly
//       --TODO--
//
//   3. Upload to S3 and synchronize to DynamoDB
//       --TODO--

define([ //list of "imports"
    'notebook/js/celltoolbar', 'base/js/namespace', 'base/js/dialog'
], function ( //and their aliases
    celltoolbar, Jupyter, dialog
) {
    "use strict";

    var CellToolbar = celltoolbar.CellToolbar,
        notebook = Jupyter.notebook;

    var kernel = notebook.kernel;

    //List to store the presets to register
    var dstext_preset = [];

    // ----------------------------------
    // Cell metadata : function attribute
    // used to split, merge, and control cell display in notebooks
    // ----------------------------------

    // Some utilities to adapt metadata value depending on context
    // (we can access the notebook from Jupyter.notebook)

    var adapt_metadata_md = function (cell, value) {
        // Adapt metadata for markdown cells
        return value;
    };

    var adapt_metadata_code = function (cell, value) {
        // Adapt metadata for code cells
        return value;
    };

    // The cell toolbar callback
    var select_function = CellToolbar.utils.select_ui_generator([
            ["-"            ,   undefined       ],
            ["Preliminary"  ,   "preliminary"   ],
            ["Submission"   ,   "submission"    ],
            ["Solution"     ,   "solution"      ],
            ["Correction"   ,   "correction"    ],
            ["Hint"         ,   "hint"          ],
            ],
            // setter
            function(cell,value){

                if (cell.type === "markdown") {
                    // not sure if value is necessary
                    var adapted_value = adapt_metadata_md(cell, value);
                } else {
                    // here, value is necessary for hints
                    var adapted_value = adapt_metadata_code(cell, value);
                }

                // set the value
                cell.metadata.function = adapted_value;
                },
            //getter
            function(cell){
                return cell.metadata.function;
                });

    CellToolbar.register_callback('dstext.edit_function',select_function);
    dstext_preset.push('dstext.edit_function');

    // ----------------------------------
    // Question dividers : pseudo-cells to infer metadata
    //  and be used for correction and display
    // ----------------------------------

    // Utilities to infer metadata for each cell
    var update_q_id = function () {
        var cells = notebook.get_cells(),
            curr_q_id = 1;

        for (var ix in cells) {
            var _cell = cells[ix];

            if (_cell.metadata.question_div) curr_q_id += 1;

            _cell.metadata.question_id = curr_q_id;
        }

        return curr_q_id;
    };

    /* We decided to use a cell to be able to use
       the Jupyter utilities such as moving it up or down,
       copying it, and save it in the .ipynb file. */

    var insert_question_divider_handler = function () {
        // Simple action to add a question divider underneath
        // Process :
        //  - Use notebook.insert_cell_below()
        //  - addClass("hidden") to all its children
        //  - add a new formatted child (display some <hr>)

        // new cell
        var _cell = notebook.insert_cell_below('code');

        // content editing
        //---
        var cell_elem = _cell.element;
        var child = cell_elem.children()[0];

        child.className += " hidden";

        /* seems to bug at last element "cannot create property 'className'..."

        for (var ix in children) {
            children[ix].className += " hidden";
        }
        */

        var question_div = $('<div />')
                            .addClass('question_divider')
                            .html('Question divider');

        cell_elem.append(question_div[0]);
        //---

        // metadata editing
        //---
        if (notebook.metadata.n_questions === undefined) {
            // if metadatum isnt set, there is at least one question
            notebook.metadata.n_questions = 1;
        }
        // and the new divider adds one
        notebook.metadata.n_questions += 1;

        // and we set this value to the divider too
        _cell.metadata.question_id = notebook.metadata.n_questions;
        _cell.metadata.question_div = true;

        // so that we can run inference
        update_q_id();
        //---
    };

    var insert_question_divider = {
        icon: 'fa-question-circle', // a font-awesome class used on buttons, etc
        help    : 'Insert a question divider below',
        help_index : 'Alt-B',
        handler : insert_question_divider_handler
    };

    var insert_qdiv_name = Jupyter.actions.register( //returns dstex:insert-...
            insert_question_divider,
            'insert-question-divider', //action name
            'dstext'); //prefix
    Jupyter.toolbar.add_buttons_group([insert_qdiv_name]);

    var insert_qdiv_kb_name = Jupyter.keyboard_manager.actions.register(
            insert_question_divider,
            'insert-question-divider',
            'dstext');
    Jupyter.keyboard_manager.command_shortcuts.add_shortcut(
        'Alt-B',insert_qdiv_kb_name);

    // ----------------------------------
    // S3 Upload
    // ----------------------------------

    var upload_s3_handler = function () {
        // Opens up a modal to specify more actions

        /* WIP -- currently playing with successive dialogs */
        function base_modal (body, action) {
            // Defines a modal in current notebook
            // with title "Upload to S3"
            return dialog.modal({
                notebook: Jupyter.notebook,
                keyboard_manager: Jupyter.keyboard_manager,
                title: "Upload to S3",
                body: body,
                buttons: {
                    OK: {
                        class: 'btn-primary',
                        click: function () {
                            action(this);
                        }
                    }
                }
            })
        }

        function goto_btn(name, origin, isPrev=false) {
            // Create a button to switch between steps
            var btn_value = 'Next'
            if (isPrev) {btn_value = 'Previous'}

            var btn = $('<button/>')
                .addClass('btn btn-default')
                .text(btn_value)
                .click( function () {
                    if (typeof name == 'function') {
                        // evaluate function at click event
                        var step_name = name();
                    } else {
                        var step_name = name;
                    }
                    origin.addClass('hidden')
                    var goto_body = origin.parent().find('.step_'+step_name)
                    goto_body.removeClass('hidden')
                })
            return btn
        }

        function step_body(options) {
            // Defines the body for a step
            // to be added to the modal body
            // @options Map object, contains
            //   title
            //   name
            //   content
            //   [prev] (can be a function)
            //   [next] (can be a function)
            var body = $('<div/>')
                    .addClass('step_'+options.name)
                    .addClass('hidden')

            var title = $('<h4/>')
                    .text(options.title)
                    .appendTo(body)

            var content = options.content
                    .appendTo(body)

            var footer = $('<div/>')
                    .appendTo(body)

            if (options.prev !== undefined) {
                var prevbtn = goto_btn(options.prev, body, true)
                        .appendTo(footer)
            }
            if (options.next !== undefined) {
                var nextbtn = goto_btn(options.next, body)
                        .appendTo(footer)
            }

            return body
        }

        // Begin modal definition

        var body = $('<div/>')

        // Step 1 : mode
        var content_mode = $('<div/>')
                .text('Select mode :')

        var mode_selector = $('<select/>')
                .append($('<option/>')
                        .attr('value', 'new')
                        .text('New exercise')
                       )
                .append($('<option/>')
                        .attr('value', 'update')
                        .text('Update exercise')
                       )
                .appendTo(content_mode)

        step_body({
                title: 'Step 1 : mode',
                content: content_mode,
                name: 'mode',
                next: function () {
                        if (mode_selector.val() == 'update') {
                            return 'select_db'
                        }
                        return 'exercise'
                    }
        })
                .removeClass('hidden')
                .appendTo(body)

        // Step 1-b : if update, then select from DB
        // todo : implement filters
        var content_select_db = $('<div/>')
                .text('Select exercise : \t')

        var exercise_selector = $('<select/>')

        var refresh_db_btn = $('<i/>')
                .addClass('fa fa-refresh')
                .hover(function () {
                    this.style.color = "blue"
                }, function () {
                    this.style.color = ""
                })
                .click(function () {
                    this.className += ' fa-spin'

                    var cell = notebook.insert_cell_above()
                    cell.element.addClass('hidden')
                    notebook.select_prev()

                    cell.set_text('import locallib\nlocallib.get_list()')
                    cell.execute()

                    var that = this
                    setTimeout(function () {
                        var output = cell.output_area.outputs[0]
                        var exercises = output.text.split('\n')

                        // remove last element, always ""
                        exercises.pop()

                        exercise_selector.empty()
                        for (var ix in exercises) {
                            var exo = exercises[ix]
                            var entry = $('<option/>')
                                .attr('value', ix)
                                .text(exo)
                                .appendTo(exercise_selector)

                            if (exo == notebook.get_notebook_name()) {
                                entry.attr('selected','')
                            }
                        }

                        notebook.delete_cell()
                        that.className = 'fa fa-refresh'
                    }, 5000)
                })
                .appendTo(content_select_db)

        $('<br/>').appendTo(content_select_db)

        exercise_selector.appendTo(content_select_db)

        step_body({
                title: 'Step 1-b : select from db',
                content: content_select_db,
                name: 'select_db',
                prev: 'mode',
                next: function(){
                    var ex_nb = exercise_selector.val()
                    populate_form_step2(ex_nb)

                    return 'exercise'
                }
        })
                .appendTo(body)

        // Step 2 : describe exercise
        var form_step2 = $('<form/>')
            .attr('id','form-step2')

        // Step 2 part 1 : define usage
        var form_step2_part1 = $('<fieldset/>')
            .attr('id', 'form-step2-part1')
            .attr('style', 'margin-top:20px;')
            .append($('<legend/>').text('Usage'))
            .appendTo(form_step2)

        form_step2_part1.append('Exercise usage: ')

        var form_step2_usage = $('<select/>')
            .attr('id', 'form-step2-usage')
            .attr('name', 'usage')
            .append($('<option/>')
                    .attr('value','train')
                    .text('Train'))
            .append($('<option/>')
                    .attr('value', 'eval')
                    .text('Evaluate'))
            .on('input change', function() {
                update_form_step2_part3($(this).val())
            })
            .appendTo(form_step2_part1)

        // Step 2 part 2 : define ID
        var form_step2_part2 = $('<fieldset/>')
            .attr('id', 'form-step2-part2')
            .attr('style', 'margin-top:20px;')
            .append($('<legend/>').text('ID'))
            .appendTo(form_step2)

        form_step2_part2.append('Exercise ID: ')

        var form_step2_id = $('<input/>')
            .attr('id', 'form-step2-id')
            .attr('name', 'id')
            .attr('type', 'text')
            .attr('size', 32)
            .appendTo(form_step2_part2)

        // Step 2 part 3 : DynamoDB entry details
        var form_step2_part3 = $('<fieldset/>')
            .attr('id', 'form-step2-part3')
            .attr('style', 'margin-top:20px;')
            .appendTo(form_step2)

        function update_form_step2_part3 (value) {
            // --- init by emptying
            form_step2_part3.empty()
                .append($('<legend/>').text('Exercise information'))

            // --- constantly needed fields

            // difficulty
            form_step2_part3.append('Difficulty: ')

            var form_step2_skill = $('<select/>')
                .attr('id', 'form-step2-skill')
                .attr('name', 'difficulty')
                .append($('<option/>')
                        .attr('value', 'EASY')
                        .text('EASY'))
                .append($('<option/>')
                        .attr('value', 'MEDIUM')
                        .text('MEDIUM'))
                .append($('<option/>')
                        .attr('value', 'HARD')
                        .text('HARD'))
                .appendTo(form_step2_part3)

            form_step2_part3.append($('<br/>'))

            // skill
            form_step2_part3.append('Skill: ')

            var form_step2_skill = $('<select/>')
                .attr('id', 'form-step2-skill')
                .attr('name', 'skill')
                .append($('<option/>')
                        .attr('value', 'AB')
                        .text('Algorithm Building'))
                .append($('<option/>')
                        .attr('value', 'EC')
                        .text('Error Correction'))
                .append($('<option/>')
                        .attr('value', 'CC')
                        .text('Code Completion'))
                .append($('<option/>')
                        .attr('value', 'MU')
                        .text('Module Utilization'))
                .appendTo(form_step2_part3)

            form_step2_part3.append($('<br/>'))

            // duration
            form_step2_part3.append('Duration: ')

            var form_step2_duration_show = $('<span/>')
                .attr('id', 'form-step2-duration-show')
                .text('15')
                .appendTo(form_step2_part3)

            form_step2_part3.append(' minutes.')

            var form_step2_duration = $('<input/>')
                .attr('id', 'form-step2-duration')
                .attr('name', 'duration')
                .attr('type', 'range')
                .attr('min', 0)
                .attr('max', 90)
                .attr('step', 5)
                .attr('value', 15)
                .on('input change', function () {
                    form_step2_duration_show.text($(this).val())
                })
                .appendTo(form_step2_part3)

            form_step2_part3.append($('<br/>'))

            // --- for train usage
            if (value == 'train') {

                // fullname
                form_step2_part3.append('Full name: ')

                var form_step2_fullname = $('<input/>')
                    .attr('id','form_step2_fullname')
                    .attr('name', 'fullname')
                    .attr('type', 'text')
                    .appendTo(form_step2_part3)

                form_step2_part3.append($('<br/>'))

                // displayname
                form_step2_part3.append('Short name: ')

                var form_step2_displayname = $('<input/>')
                    .attr('id','form_step2_displayname')
                    .attr('name', 'displayname')
                    .attr('type', 'text')
                    .appendTo(form_step2_part3)

                form_step2_part3.append($('<br/>'))

            // --- for eval usage
            } else {

                // category
                form_step2_part3.append('Category: ')

                var form_step2_category = $('<select/>')
                    .attr('id', 'form-step2-category')
                    .attr('name', 'category')
                    .append($('<option/>')
                            .attr('value', 'Data Acquisition')
                            .text('Data Acquisition'))
                    .append($('<option/>')
                            .attr('value', 'Data Cleaning')
                            .text('Data Cleaning'))
                    .append($('<option/>')
                            .attr('value', 'Data Processing')
                            .text('Data Processing'))
                    .append($('<option/>')
                            .attr('value', 'Modeling')
                            .text('Modeling'))
                    .appendTo(form_step2_part3)

                form_step2_part3.append($('<br/>'))

                // field
                form_step2_part3.append('Activity field: ')

                var form_step2_field = $('<input/>')
                    .attr('id','form_step2_field')
                    .attr('name', 'field')
                    .attr('type', 'text')
                    .appendTo(form_step2_part3)

                form_step2_part3.append($('<br/>'))

                // hashtags
                form_step2_part3.append('Hashtags: (separate with commas) ')

                var form_step2_hashtags = $('<input/>')
                    .attr('id','form_step2_hashtags')
                    .attr('name', 'hashtags')
                    .attr('type', 'text')
                    .appendTo(form_step2_part3)

                form_step2_part3.append($('<br/>'))

                // similar_id
                form_step2_part3.append('Similar ID: (variants of the same exercise share this value) ')

                var form_step2_similarid = $('<input/>')
                    .attr('id','form_step2_similarid')
                    .attr('name', 'similarid')
                    .attr('type', 'number')
                    .appendTo(form_step2_part3)

                form_step2_part3.append($('<br/>'))

                // type (A or B)
                form_step2_part3.append('Type: ')

                var form_step2_type = $('<select/>')
                    .attr('id', 'form-step2-type')
                    .attr('name', 'type')
                    .append($('<option/>')
                            .attr('value', 'A')
                            .text('A'))
                    .append($('<option/>')
                            .attr('value', 'B')
                            .text('B'))
                    .appendTo(form_step2_part3)

            }
        }

        // run at initialization
        update_form_step2_part3(form_step2_usage.val())

        // if we just selected an exercise, we can populate the form
        function populate_form_step2 (ex_nb) {
            //get data from locallib
            var cell = notebook.insert_cell_above()
            cell.element.addClass('hidden')
            notebook.select_prev()

            cell.set_text('import locallib\nlocallib.get_data('+ex_nb+')')
            cell.execute()

            var form = $('#form-step2')

            //add loading notification
            var form_title = form.parent().parent().find('h4')
            var loading_notif = $('<em/>')
                            .text(' (Loading...)')
                            .css('color', 'blue')
                            .appendTo(form_title)

            setTimeout(function () {
                var output = cell.output_area.outputs[0]
                var data = output.text.split('&')

                data.forEach(function (elem) {
                    var elem_contents = elem.split('=')
                    if (elem_contents.length == 2) {
                        var name=elem_contents[0], value=elem_contents[1]

                        if (name=='usage') {

                            var check_usage = form.find('[name=usage]').val()

                            if (value != check_usage) {
                                update_form_step2_part3(value)
                            }

                        }

                        if (name=='duration') {

                            $('#form-step2-duration-show').text(''+value)

                        }

                        form.find('[name='+name+']')
                            .val(value)

                    } else {
                        console.log('Problem with element : '+elem)
                    }
                })

                notebook.delete_cell()
                loading_notif.remove()
            }, 2000)
        }

        if (mode_selector.val() == 'update') {
            populate_form_step2('-1')//exercise_selector.val())
        }

        var content_exercise = $('<div/>')
                .append(form_step2)

        step_body({
                title: 'Step 2 : exercise description',
                content: content_exercise,
                name: 'exercise',
                prev: function () {
                    if (mode_selector.val() == 'update') {
                        return 'select_db'
                    }
                    return 'mode'
                },
                next: 'add_files'
        })
                .appendTo(body)

        // Step 3 : additional files
        var form_step3 = $('<form/>')
            .attr('id', 'form-step3')
            .append('Add files to be shipped with this notebook. They should all be in the same folder as the notebook. Any distant file on the S3 storage that shares name with one you sent will be overwritten.')
            .append($('<br/>'))

        var add_file_parent = $('<div/>')
            .addClass('row')
            .attr('counter', '1')
            .append($('<div/>').addClass('col-xs-4 insert-file'))
            .append($('<div/>').addClass('col-xs-2 validate'))
            .append($('<div/>').addClass('col-xs-2 remove'))
            .append($('<div/>').addClass('col-xs-4 info'))

        var validate_btn = $('<i/>')
            .addClass('fa fa-check')
            .css('color', 'green')
            .appendTo($(add_file_parent).find('.validate'))
            .click(function () {
                var filename = $(this).parent().parent() // add_file_parent
                    .find('.insert-file').find('input').val()
                    //the corresponding input field value

                if (filename != '') {
                    var new_file = $(this).parent().parent().clone(true)

                    var counter = new_file.attr('counter')

                    counter = (parseInt(counter) + 1).toString()

                    new_file.attr('counter', counter)
                                .appendTo(form_step3)

                    new_file.find('.insert-file').find('input')
                                .val('')
                                .attr('name','add_file_'+counter)

                } else {
                    //alert("The field is empty !")
                    var info_field = $(this).parent().parent()
                                        .find('.info')

                    info_field.text('The field is empty !')

                    setTimeout(function(){
                        info_field.text('')
                    }, 3000)
                }
            })

        var delete_btn = $('<i/>')
            .addClass('fa fa-close')
            .css('color', 'red')
            .appendTo($(add_file_parent).find('.remove'))
            .click(function () {
                if ($(this).parent().parent().siblings().length > 1) {
                    $(this).parent().parent().remove()

                    //TODO
                    //should add counter reset for inputs here

                } else {
                    var info_field = $(this).parent().parent()
                                        .find('.info')

                    info_field.text('Leave empty if you want no file.')

                    setTimeout(function(){
                        info_field.text('')
                    }, 3000)
                }
            })

        var insert_file = $('<input/>')
            .attr('name', 'add_file_1')
            .attr('type', 'text')
            .attr('form', 'form-step3')
            .appendTo($(add_file_parent).find('.insert-file'))

        add_file_parent.appendTo(form_step3)

        var content_add_files = $('<div/>')
                .append(form_step3)

        step_body({
                title : 'Step 3 : additional files',
                content: content_add_files,
                name: 'add_files',
                prev: 'exercise'
        })
                .appendTo(body)

        var modal = base_modal(body, function(){});

        function get_form_str() {
            var form_str = ''

            form_str += 'mode=' + mode_selector.val() + '&'

            form_str += $('#form-step2').serialize() + '&'

            form_str += $('#form-step3').serialize()

            return form_str
        }

        // disable modal dismiss with OK button
        modal.find('.modal-content').find('.modal-footer').find('button')
            .removeAttr('data-dismiss')
            .click(function () {
                var action = 'submit', name = 'test'

                var confirm_msg = ''
                    + 'You are about to '
                    + action
                    + ' the exercise "'
                    + name
                    + '". Are you sure ?'

                var valid_up = confirm(confirm_msg)

                if (valid_up) {
                    //store nb name
                    var nb_name = notebook.get_notebook_name()

                    //save notebook
                    notebook.save_notebook()

                    //add hidden cell trick --to remove
                    var cell = notebook.insert_cell_above()
                    cell.element.addClass('hidden')
                    notebook.select_prev()

                    cell.set_text('import locallib\nlocallib.send("'+
                                  get_form_str()+'", "'+
                                  notebook.get_notebook_name() + '")')
                    cell.execute()

                    setTimeout(function(){
                        notebook.delete_cell()
                    }, 1000)
                }
            })

    }; // end upload_S3_handler()

    var upload_s3 = {
        icon: 'fa-cloud-upload',
        help: 'Upload notebook to S3 storage',
        help_index: '',
        handler: upload_s3_handler
    };

    var upload_s3_name = Jupyter.actions.register( //returns dstex:upload-s3
            upload_s3,
            'upload-s3', //action name
            'dstext'); //prefix
    Jupyter.toolbar.add_buttons_group([upload_s3_name]);

    // ----------------------------------
    // Notebook initialization
    // ----------------------------------

    function get_base_cell(text, size, id)
    {
        return ($('<div class="cell2 text_cell rendered unselected" tabindex="2"><div class="prompt input_prompt"></div><div class="inner_cell"><div class="btn-group" style="padding-left: 6px;"><button title="show new celltoolbar selector location" class="btn btn-default" style="width: ' + size + '; background-color: #f5f5f5;" ' + id + '>' + text + '</button></div></div></div>'));
        //return ($('<div class="cell text_cell rendered unselected" tabindex="2" style="border: 0; background: 0;"><div class="prompt input_prompt"></div><div class="inner_cell"><div class="btn-group" style="padding-left: 6px;"><button title="show new celltoolbar selector location" class="btn btn-default" style="width: 200px; background-color: #f5f5f5;">Show correction</button></div></div></div>'));
    }

    var to_hint = function (cell) {
      var show_msg = '<img style="width: 100%;" src="http://icons.iconarchive.com/icons/oxygen-icons.org/oxygen/256/Actions-help-hint-icon.png"></img>'
      var base_cell = get_base_cell(show_msg, "50px", 'btn_hint');
      var button = $(base_cell).find('button');

      $(button).attr('state', 'on');

      $(cell).before(base_cell);
      $(cell).hide();

      $(button).click(function(){
          if ($(this).attr('state') == 'on'){
              //test_modal($(this), $(cell)); return;
              $(this).attr('state', 'off');
              $(cell).slideDown();
          } else {
              $(this).attr('state', 'on');
              $(cell).slideUp();
          }
      });
    }

    var to_solution = function (cell) {
      var show_msg = "Show solution"
      var hide_msg = "Hide solution"
      var base_cell = get_base_cell(show_msg, "200px", 'btn_corr');
      var button = $(base_cell).find('button');

      $(cell).before(base_cell);
      $(cell).hide();

      $(button).click(function(){
          if ($(this).text() == show_msg){
              //test_modal($(this), $(cell)); return;
              $(this).text(hide_msg);
              $(cell).slideDown();
          } else {
              $(this).text(show_msg);
              $(cell).slideUp();
          }
      });
    }

    var format_cells = function () {
        var cells = notebook.get_cells();

        for (var ix in cells) {
            var cell = cells[ix];

            if (cell.metadata.function == 'hint') {
                to_hint(cell.element)
            }

            if (cell.metadata.function == 'solution' && cell.cell_type == 'code') {
                to_solution(cell.element)
            }

            if (cell.metadata.question_div) {
                $(cell.element).hide()
            }
        }
    }

    var init_notebook = function () {
        // Mode Demo
        setTimeout(format_cells, 2000)

        return 'Mode Demo'
    }

    // ----------------------------------
    // Helper functions
    // ----------------------------------

    // Atm, extracted from notebook/js/celltoolbarpresets/example.js
    // To be improved with "enhanced dynamic modals" lol
    var simple_dialog = function(title,text_list){
        var dlg = $('<div/>').attr('title',title);
        for (var _id in text_list) {
            var _text = text_list[_id].join('\n');
            $(dlg).append($('<p/>').text(_text));
        }
        $(dlg).dialog({
                autoOpen: true,
                height: 300,
                width: 650,
                modal: true,
                close: function() {
                    /*
                     cleanup on close
                     */
                    $(this).remove();
                }
        });
    };

    var add_info_button = function(div, cell) {
        var button_container = $(div);
        var button = $('<div/>').button({label:'?'})
                .click(function(){
                    update_q_id();
                    var toPrint = cell.metadata.question_id;
                    alert("Question id : " + toPrint);
                    return false;
                });
        button_container.append(button);
    };

    // ----------------------------------
    // Register the extension
    // ----------------------------------
    var load_ipython_extension = function () {
        console.log('Loading : DataScientest extension for Jupyter Notebook.');
        /*
        console.log('CellToolbar preset : Datascientest - Edit');
        CellToolbar.register_callback('dstext.edit_info',add_info_button);
        dstext_preset.push('dstext.edit_info');

        CellToolbar.register_preset('DataScientest - Edit',
                                    dstext_preset, notebook);
        console.log('--OK');
        */
        console.log('Notebook initialization');
        console.log(init_notebook());
        console.log('--OK');
    };
    return {load_ipython_extension: load_ipython_extension};
});
